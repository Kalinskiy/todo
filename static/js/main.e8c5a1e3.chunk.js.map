{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/TodolistsList/auth-reducer.ts","app/app-reducer.tsx","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedIn","state","action","payload","value","authReducer","reducer","actions","isInitialized","setAppIsInitialized","appReducer","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","setTodolistsAC","todolists","map","changeTodolistEntityStatusAC","changeTodolistFilterAC","todolistsReducer","removeTaskAC","tasks","t","addTaskAC","todoListId","updateTaskAC","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModel","getState","a","task","find","console","warn","apiModel","deadline","description","priority","startDate","res","resultCode","AddItemForm","React","memo","props","useState","setTitle","setError","addItem","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","disabled","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","items","log","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","demo","useSelector","auth","removeTaskTC","item","addTaskTC","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","to","Grid","container","padding","spacing","allTodolistTasks","Paper","Alert","elevation","ErrorSnackbar","app","setOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","Box","display","justifyContent","alignItems","minHeight","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.e8c5a1e3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios'\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'bdb9022f-3466-40e1-957a-ab975d07c6cb'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{userId?: number}>>('auth/login',data);\r\n    },\r\n    auth(){\r\n        return instance.get<ResponseType<{id:number, email:string}>>('auth/me')\r\n    } ,\r\n    logout(){\r\n        return instance.delete<ResponseType>('auth/login')\r\n    }\r\n}\r\n\r\n","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer';\r\nimport {Dispatch} from 'redux';\r\nimport {ResponseType} from '../api/todolists-api';\r\n\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: Dispatch) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n    dispatch(setAppErrorAC({error: error.message} || {error: 'some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\n","import {setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n// types\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedIn(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedIn} = slice.actions\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) =>\r\n    async (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        try {\r\n            const res = await authAPI.login(data)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn({value: true}))\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n\r\n        } catch (e) {\r\n            handleServerNetworkError(e, dispatch)\r\n        }\r\n\r\n\r\n    }\r\nexport const logoutTC = () =>\r\n    async (dispatch: Dispatch) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        try {\r\n            const res = await authAPI.logout()\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedIn({value: false}))\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n                dispatch(setAppStatusAC({status: \"failed\"}))\r\n            }\r\n\r\n        } catch (e) {\r\n            handleServerNetworkError(e, dispatch)\r\n        }\r\n\r\n\r\n    }\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolists-api\";\r\nimport {handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {setIsLoggedIn} from \"../features/TodolistsList/auth-reducer\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\n\r\nconst initialState = {\r\n    status: 'idle',\r\n    error: null as null | string,\r\n    isInitialized: false  //true когда приложение проинициализировалось (проверили пользователя, получили настройки и т.д)\r\n}\r\n\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppIsInitialized(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isInitialized = action.payload.value\r\n        },\r\n\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppStatusAC, setAppErrorAC, setAppIsInitialized} = slice.actions\r\n\r\n\r\n//thunks\r\n\r\nexport const initializedAppTC = () => async (dispatch: Dispatch) => {\r\n\r\n    try {\r\n        const res = await authAPI.auth()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedIn({value: true}))\r\n        } else {\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    } finally {\r\n        dispatch(setAppIsInitialized({value: true}))\r\n    }\r\n}\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {initializedAppTC, RequestStatusType, setAppStatusAC} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n\r\n}\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todo',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index, 1);\r\n            }\r\n        },\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: Array<TodolistType> }>) {\r\n            return action.payload.todolists.map((tl: any) => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].entityStatus = action.payload.entityStatus\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        }\r\n    },\r\n})\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n    removeTodolistAC,\r\n    addTodolistAC,\r\n    changeTodolistTitleAC,\r\n    setTodolistsAC,\r\n    changeTodolistEntityStatusAC,\r\n    changeTodolistFilterAC,\r\n} = slice.actions\r\n\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        dispatch(setTodolistsAC({todolists: res.data}))\r\n        dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n\r\nexport const removeTodolistTC = (todolistId: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    dispatch(changeTodolistEntityStatusAC({id: todolistId, entityStatus:'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.deleteTodolist(todolistId)\r\n        dispatch(removeTodolistAC({id:todolistId}))\r\n        dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    try {\r\n        const res = await todolistsAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(addTodolistAC({todolist:res.data.data.item}))\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n\r\n    } catch (error) {\r\n        //dispatch(setAppErrorAC('Error! Please check your network'))\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n\r\nexport const changeTodolistTitleTC = (id: string, title: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    try {\r\n        const res = await todolistsAPI.updateTodolist(id, title)\r\n        dispatch(changeTodolistTitleAC({id: id, title}))\r\n        dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n","import {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    TodolistType,\r\n    UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC,} from \"../../app/app-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {addTodolistAC, removeTodolistAC, setTodolistsAC} from \"./todolists-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            tasks.splice(index, 1)\r\n        },\r\n        addTaskAC(state, action: PayloadAction<TaskType>) {\r\n            state[action.payload.todoListId].unshift(action.payload)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\r\n            const tasks = state[action.payload.todolistId];\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            tasks[index] = {...tasks[index], ...action.payload.model}\r\n\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todolistId: string }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        });\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach((tl: { id: string | number; }) => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n})\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC} = slice.actions\r\nexport const tasksReducer = slice.reducer\r\n\r\n\r\n// thunks\r\n\r\nexport const fetchTasksTC = (todolistId: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    try {\r\n        const res = await todolistsAPI.getTasks(todolistId)\r\n        const tasks = res.data.items\r\n        dispatch(setTasksAC({tasks, todolistId}))\r\n        dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    try {\r\n        const res = await todolistsAPI.deleteTask(todolistId, taskId)\r\n        dispatch(removeTaskAC({taskId, todolistId}))\r\n        dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => async (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: \"loading\"}))\r\n    try {\r\n        const res = await todolistsAPI.createTask(todolistId, title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(addTaskAC(res.data.data.item)) // task =  res.data.data.item\r\n            dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n\r\n    }\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC({status: \"loading\"}))\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n        try {\r\n            const res = await todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(updateTaskAC({taskId, model: domainModel, todolistId}))\r\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n\r\n        } catch (error) {\r\n            handleServerNetworkError(error, dispatch)\r\n\r\n        }\r\n    }\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?:any\r\n\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\nimport {AppRootStateType} from \"../../../app/store\";\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [])\r\nuseEffect(()=>{\r\n    console.log(props.entityStatus)\r\n},[props.entityStatus])\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton\r\n                disabled={props.entityStatus === 'loading'}\r\n                onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n\r\n    changeTodolistFilterAC, TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [])\r\n\r\n\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        dispatch(removeTaskTC(id, todolistId))\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        dispatch(addTaskTC(title, todolistId))\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        dispatch(updateTaskTC(id, {status}, todolistId))\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        dispatch(updateTaskTC(id, {title: newTitle}, todolistId))\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n\r\n        dispatch(changeTodolistFilterAC({id: todolistId, filter: value}))\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        dispatch(removeTodolistTC(id))\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        dispatch(changeTodolistTitleTC(id, title))\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title))\r\n    }, [dispatch])\r\n\r\n    if(!isLoggedIn || demo){\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                entityStatus={tl.entityStatus}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                filter={tl.filter}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const dispatch = useDispatch()\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n    const [open, setOpen] = React.useState(true)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setOpen(false)\r\n        dispatch(setAppErrorAC({error: null}))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={error!== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {loginTC} from \"../TodolistsList/auth-reducer\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'password required'\r\n                }\r\n            }\r\n        },\r\n\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    });\r\n    if(isLoggedIn){\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}>here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps('rememberMe')}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Box,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializedAppTC} from './app-reducer'\r\nimport {BrowserRouter, Route, Redirect} from \"react-router-dom\";\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logoutTC} from \"../features/TodolistsList/auth-reducer\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(()=>{\r\n        dispatch(initializedAppTC())\r\n    },[])\r\n\r\n    const status = useSelector<AppRootStateType, string>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType,boolean>(state => state.auth.isLoggedIn)\r\n\r\n\r\n    const logoutHandler = useCallback(()=>{\r\n        dispatch(logoutTC())\r\n    },[])\r\n    if(!isLoggedIn){\r\n        return (\r\n            <Redirect to={'/login'}/>\r\n        )\r\n    }\r\n    if (!isInitialized) {\r\n        return <Box  display=\"flex\"\r\n                     justifyContent=\"center\"\r\n                     alignItems=\"center\"\r\n                     minHeight=\"100vh\">\r\n            <CircularProgress/>\r\n        </Box>\r\n    }\r\n    return (\r\n\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn &&<Button onClick={logoutHandler} color=\"inherit\">Log-out</Button> }\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed>\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                </Container>\r\n            </div>\r\n\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\n\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {authReducer} from \"../features/TodolistsList/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {appReducer} from \"./app-reducer\";\r\nimport {todolistsReducer} from \"../features/TodolistsList/todolists-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\nexport type rootReducerType = typeof rootReducer\r\n// непосредственно создаём store\r\n// export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<rootReducerType>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App/>\r\n        </HashRouter>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}